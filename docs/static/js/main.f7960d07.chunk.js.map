{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","className","type","value","onChange","target","getGifs","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAe1C,OACI,sBAAMC,SATW,SAACC,GAElBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAmBO,OACzCN,EAAc,MAIYO,UAAU,yCAAxC,SACI,uBACIC,KAAK,OACLC,MAAOV,EACPW,SAhBc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMN,GAAN,uBAAAO,EAAA,6DACbC,EADa,iDACmCR,EADnC,+DAEAS,MAAMD,GAFN,cAEbE,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAYZK,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAClC,OACI,sBAAKP,UAAU,yCAAf,UACI,qBAAKoB,IAAKb,EAAKc,IAAKL,IACpB,4BAAIA,QCAHM,EAAU,SAAC,GAAc,IAAbvB,EAAY,EAAZA,SAAY,ECHT,SAACA,GAAY,IAAD,EACVR,mBAAS,CAC/BoB,KAAK,GACLY,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAC,qBAAU,WACNrB,EAAQN,GAAU4B,MAAK,SAAAC,GACnBH,EAAS,CACLd,KAAKiB,EACLL,SAAQ,SAGlB,CAACxB,IAEIyB,EDLuBK,CAAa9B,GAA/BkB,EAPqB,EAO1BN,KAAYY,EAPc,EAOdA,QAGnB,OACI,qCACI,6BAAKxB,IACJwB,GAAW,wCACX,qBAAKvB,UAAU,YAAf,SACIiB,EAAOJ,KAAK,SAAAC,GAAG,OAAI,cAAC,EAAD,eACoBA,GADFA,EAAIC,aEU3Ce,EA1BM,WAAK,IAAD,EACevC,mBAAS,CAAC,iBADzB,mBACdwC,EADc,KACFzC,EADE,KAQrB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACKyC,EAAWlB,KAAI,SAACd,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCpBlCiC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f7960d07.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories})=>{\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e)=>{\n        //con esto evitamos refrescar la pagina completa producto del form\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(category => [inputValue,...category]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit} className='card animate__animated animate__zoomIn'>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n};","export const getGifs = async(category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=UM1BIL2doe0LLr66kcnm4Nh5pR2m4Th3`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className='card animate__animated animate__zoomIn'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category})=>{\n    /*const [images, setImages] = useState([]);\n\n    useEffect( () => {\n        getGifs(category).then(setImages);\n    }, [category]);\n    */\n    const {data:images,loading} = useFetchGifs(category);\n    \n    \n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading</p> }\n            {<div className='card-grid'>\n                {images.map( img => <GifGridItem key={img.id} \n                                                    {...img}/>)}\n            </div>}\n        </>\n        \n    );\n};\n\n","import {useState,useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect(()=>{\n        getGifs(category).then(imgs=>{\n            setState({\n                data:imgs,\n                loading:false\n            })\n        });\n    },[category]);\n\n    return state;\n}","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = ()=>{\n    const [categories, setCategories] = useState(['Black Clover']);\n\n    /*const handleAdd =()=>{\n        setCategories([...categories,'Tokyo Gohul']);\n    };*/\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            {/*<button onClick={handleAdd}>Agregar</button>*/}\n\n            <ol>\n                {categories.map((category) => \n                    <GifGrid key={category} category={category}/>\n                )}\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}